name: Deploy to Amazon ECS
on:
  push:
    branches:
    - master
  pull_request:
    branches: 
    - master
env:
  AWS_REGION: us-east-2
  ECS_CLUSTER: app_cluster
  CONTAINER_NAME: app
  ECS_SERVICE: app_service
  ECS_TD: .github/workflows/td.json
  IAM_ID: 858991986761

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        repository: vangageetharani /terraform-demo
        path: terraform-demo
 
    - name: terraform init
      run: terraform init
      working-directory: ./terraform-demo/ecs-repo

    - name: terraform apply
      run: terraform apply --auto-approve
      working-directory: ./terraform-demo/ecs-repo

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: "${{ env.IAM_ID }}.dkr.ecr.us-east-2.amazonaws.com"
        ECR_REPOSITORY: "app_repo"
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: terraform init
      run: terraform init
      working-directory: ./terraform-demo/infra

    - name: terraform apply
      run: terraform apply --auto-approve
      working-directory: ./terraform-demo/infra

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def-1
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TD }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-1.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

